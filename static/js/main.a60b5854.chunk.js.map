{"version":3,"sources":["Modal.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Modal","_ref","show","children","showHideClassName","react_default","a","createElement","className","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showModal","setState","hideModal","value","state","bind","assertThisInitialized","handleChange","handleSubmit","event","target","preventDefault","onSubmit","htmlFor","id","type","name","onChange","required","src_Modal","handleClose","role","onClick","Component","App","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAYeA,EAVD,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACdC,EAAoBF,EAAO,mBAAqB,qBAEtD,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GACXD,ICmDMM,cAtDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,UAAY,WACVP,EAAKQ,SAAS,CAAEjB,MAAM,KAbLS,EAenBS,UAAY,WACVT,EAAKQ,SAAS,CAAEjB,MAAM,EAAOmB,MAAO,MAdpCV,EAAKW,MAAQ,CACXD,MAAO,GACPnB,MAAM,GAGRS,EAAKO,UAAYP,EAAKO,UAAUK,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKS,UAAYT,EAAKS,UAAUG,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKe,aAAef,EAAKe,aAAaH,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVHA,4EAkBNgB,GACXb,KAAKK,SAAS,CAACE,MAAOM,EAAMC,OAAOP,6CAExBM,GAEXb,KAAKI,YAELS,EAAME,kDAGN,OACExB,EAAAC,EAAAC,cAAA,QAAMuB,SAAUhB,KAAKY,cACnBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,QAAf,SACA1B,EAAAC,EAAAC,cAAA,SAAOyB,GAAG,OAAOC,KAAK,OAAOC,KAAK,OAAOb,MAAOP,KAAKQ,MAAMD,MAAOc,SAAUrB,KAAKW,aAAcjB,UAAU,eAAe4B,UAAQ,KAElI/B,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,SAASzB,UAAU,mBAAhC,UACAH,EAAAC,EAAAC,cAAC8B,EAAD,CAAOnC,KAAMY,KAAKQ,MAAMpB,KAAMoC,YAAaxB,KAAKM,WAC9Cf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe+B,KAAK,YACjClC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeM,KAAKQ,MAAMD,MAAxC,yBAEFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,SAASzB,UAAU,kBAAkBgC,QAAS1B,KAAKM,WAAhE,wBA5CGqB,aCcJC,0LAXX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,oDACAH,EAAAC,EAAAC,cAACoC,EAAD,eANQF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a60b5854.chunk.js","sourcesContent":["import  React from 'react';\r\n\r\nconst Modal = ({show, children }) => {\r\n  const showHideClassName = show ? 'modal-fixed show' : 'modal-fixed d-none';\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n        {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\nimport Modal from './Modal.js';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      show: false\n    };\n\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  showModal = () => {\n    this.setState({ show: true });\n  }\n  hideModal = () => {\n    this.setState({ show: false, value: '' });\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n  handleSubmit(event) {\n    // Show modal\n    this.showModal();\n    // Prevent default submit\n    event.preventDefault();\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input id=\"name\" type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"form-control\" required />\n        </div>\n        <button type=\"submit\" className=\"btn btn-warning\">Submit</button>\n        <Modal show={this.state.show} handleClose={this.hideModal} >\n          <div className=\"\">\n          <div className=\"modal-dialog\" role=\"document\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\">{this.state.value}, you are beautiful!</h5>\n              </div>\n              <div className=\"modal-footer\">\n                <button type=\"button\" className=\"btn btn-warning\" onClick={this.hideModal}>Thanks!</button>\n              </div>\n            </div>\n          </div>\n          </div>\n        </Modal>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Form from './Form.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"col-sm-7 m-auto\">\n          <p className=\"lead text-center\">Are you beautiful? Enter your name and find out.</p>\n          <Form />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}